import * as tslib_1 from "tslib";
import { animate, keyframes, state, style, transition, trigger, } from '@angular/animations';
import { Component, Input, ViewChild, } from '@angular/core';
import { buildLinearPath, buildSmoothPath } from '../helpers/DOM.helpers';
import { normalize } from '../helpers/math.helpers';
import { generateId } from '../helpers/misc.helpers';
import { normalizeDataset } from './trend.helpers';
var TrendComponent = /** @class */ (function () {
    function TrendComponent() {
        this.autoDraw = false;
        this.autoDrawDuration = 2000;
        this.autoDrawEasing = 'ease';
        this.padding = 8;
        this.radius = 10;
        this.stroke = 'black';
        this.strokeLinecap = '';
        this.strokeWidth = 1;
        this.gradient = [];
        this.svgHeight = '25%';
        this.svgWidth = '100%';
        this.animationState = '';
        this.id = generateId();
        this.gradientId = "ngx-trend-vertical-gradient-" + this.id;
    }
    TrendComponent.prototype.ngOnChanges = function () {
        var _this = this;
        // We need at least 2 points to draw a graph.
        if (!this.data || this.data.length < 2) {
            return;
        }
        // `data` can either be an array of numbers:
        // [1, 2, 3]
        // or, an array of objects containing a value:
        // [{ value: 1 }, { value: 2 }, { value: 3 }]
        //
        // For now, we're just going to convert the second form to the first.
        // Later on, if/when we support tooltips, we may adjust.
        var plainValues = this.data.map(function (point) {
            if (typeof point === 'number') {
                return point;
            }
            return point.value;
        });
        // Our viewbox needs to be in absolute units, so we'll default to 300x75
        // Our SVG can be a %, though; this is what makes it scalable.
        // By defaulting to percentages, the SVG will grow to fill its parent
        // container, preserving a 1/4 aspect ratio.
        var viewBoxWidth = this.width || 300;
        var viewBoxHeight = this.height || 75;
        this.svgWidth = this.width || '100%';
        this.svgHeight = this.height || '25%';
        this.viewBox = "0 0 " + viewBoxWidth + " " + viewBoxHeight;
        var root = location.href.split(location.hash || '#')[0];
        this.pathStroke = (this.gradient && this.gradient.length) ? "url('" + root + "#" + this.gradientId + "')" : undefined;
        this.gradientTrimmed = this.gradient.slice().reverse().map(function (val, idx) {
            return {
                idx: idx,
                stopColor: val,
                offset: normalize(idx, 0, _this.gradient.length - 1 || 1),
            };
        });
        var normalizedValues = normalizeDataset(plainValues, this.padding, viewBoxWidth - this.padding, 
        // NOTE: Because SVGs are indexed from the top left, but most data is
        // indexed from the bottom left, we're inverting the Y min/max.
        viewBoxHeight - this.padding, this.padding);
        if (this.autoDraw && this.animationState !== 'active') {
            this.animationState = 'inactive';
            setTimeout(function () {
                _this.lineLength = _this.pathEl.nativeElement.getTotalLength();
                _this.animationState = 'active';
            });
        }
        this.d = this.smooth
            ? buildSmoothPath(normalizedValues, this.radius)
            : buildLinearPath(normalizedValues);
    };
    tslib_1.__decorate([
        Input()
    ], TrendComponent.prototype, "data", void 0);
    tslib_1.__decorate([
        Input()
    ], TrendComponent.prototype, "smooth", void 0);
    tslib_1.__decorate([
        Input()
    ], TrendComponent.prototype, "autoDraw", void 0);
    tslib_1.__decorate([
        Input()
    ], TrendComponent.prototype, "autoDrawDuration", void 0);
    tslib_1.__decorate([
        Input()
    ], TrendComponent.prototype, "autoDrawEasing", void 0);
    tslib_1.__decorate([
        Input()
    ], TrendComponent.prototype, "width", void 0);
    tslib_1.__decorate([
        Input()
    ], TrendComponent.prototype, "height", void 0);
    tslib_1.__decorate([
        Input()
    ], TrendComponent.prototype, "padding", void 0);
    tslib_1.__decorate([
        Input()
    ], TrendComponent.prototype, "radius", void 0);
    tslib_1.__decorate([
        Input()
    ], TrendComponent.prototype, "stroke", void 0);
    tslib_1.__decorate([
        Input()
    ], TrendComponent.prototype, "strokeLinecap", void 0);
    tslib_1.__decorate([
        Input()
    ], TrendComponent.prototype, "strokeWidth", void 0);
    tslib_1.__decorate([
        Input()
    ], TrendComponent.prototype, "gradient", void 0);
    tslib_1.__decorate([
        Input()
    ], TrendComponent.prototype, "preserveAspectRatio", void 0);
    tslib_1.__decorate([
        Input()
    ], TrendComponent.prototype, "svgHeight", void 0);
    tslib_1.__decorate([
        Input()
    ], TrendComponent.prototype, "svgWidth", void 0);
    tslib_1.__decorate([
        ViewChild('pathEl', { static: false })
    ], TrendComponent.prototype, "pathEl", void 0);
    TrendComponent = tslib_1.__decorate([
        Component({
            selector: 'ngx-trend',
            template: "\n  <svg *ngIf=\"data && data.length >= 2\"\n    [attr.width]=\"svgWidth\"\n    [attr.height]=\"svgHeight\"\n    [attr.stroke]=\"stroke\"\n    [attr.stroke-width]=\"strokeWidth\"\n    [attr.stroke-linecap]=\"strokeLinecap\"\n    [attr.viewBox]=\"viewBox\"\n    [attr.preserveAspectRatio]=\"preserveAspectRatio\"\n  >\n    <defs *ngIf=\"gradient && gradient.length\">\n      <linearGradient [attr.id]=\"gradientId\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n        <stop\n          *ngFor=\"let g of gradientTrimmed;\"\n          [attr.key]=\"g.idx\"\n          [attr.offset]=\"g.offset\"\n          [attr.stop-color]=\"g.stopColor\"\n        />\n      </linearGradient>\n    </defs>\n    <path fill=\"none\" #pathEl\n      [attr.stroke]=\"pathStroke\" [attr.d]=\"d\"\n      [@pathAnimaiton]=\"{\n        value: animationState,\n        params: {\n          autoDrawDuration: autoDrawDuration,\n          autoDrawEasing: autoDrawEasing,\n          lineLength: lineLength\n        }\n      }\" />\n  </svg>\n  ",
            animations: [
                trigger('pathAnimaiton', [
                    state('inactive', style({ display: 'none' })),
                    transition('* => active', [
                        style({ display: 'initial' }),
                        // We do the animation using the dash array/offset trick
                        // https://css-tricks.com/svg-line-animation-works/
                        animate('{{ autoDrawDuration }}ms {{ autoDrawEasing }}', keyframes([
                            style({
                                'stroke-dasharray': '{{ lineLength }}px',
                                'stroke-dashoffset': '{{ lineLength }}px',
                            }),
                            style({
                                'stroke-dasharray': '{{ lineLength }}px',
                                'stroke-dashoffset': 0,
                            }),
                        ])),
                        // One unfortunate side-effect of the auto-draw is that the line is
                        // actually 1 big dash, the same length as the line itself. If the
                        // line length changes (eg. radius change, new data), that dash won't
                        // be the same length anymore. We can fix that by removing those
                        // properties once the auto-draw is completed.
                        style({
                            'stroke-dashoffset': '',
                            'stroke-dasharray': '',
                        }),
                    ]),
                ]),
            ]
        })
    ], TrendComponent);
    return TrendComponent;
}());
export { TrendComponent };
//# sourceMappingURL=data:application/json;base64,